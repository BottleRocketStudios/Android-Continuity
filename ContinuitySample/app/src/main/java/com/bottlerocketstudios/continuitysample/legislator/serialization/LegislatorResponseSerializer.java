package com.bottlerocketstudios.continuitysample.legislator.serialization;

import com.bottlerocketstudios.continuitysample.legislator.model.LegislatorResponse;
import com.bottlerocketstudios.continuitysample.legislator.model.Legislator;
import com.bottlerocketstudios.continuitysample.legislator.model.Page;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Automatically generated by jsonGenerator.py
 */
public class LegislatorResponseSerializer {
    private static final String TAG = LegislatorResponseSerializer.class.getSimpleName();
    
    private static final String OBJECT_NAME = "LegislatorResponse";
        
    private static final String FIELD_COUNT = "count";
    private static final String FIELD_RESULTS = "results";
    private static final String FIELD_PAGE = "page";
    
    public static String getObjectName() {
        return OBJECT_NAME;
    }
    
    public static LegislatorResponse parseJsonObject(JSONObject json, LegislatorImageUrlFormatter legislatorImageUrlFormatter) throws JSONException {
        
        LegislatorResponse legislatorResponse = new LegislatorResponse();

        legislatorResponse.setCount(json.getLong(FIELD_COUNT));

        JSONArray resultsJsonArray = json.getJSONArray(FIELD_RESULTS);
        List<Legislator> results = new ArrayList<>(resultsJsonArray.length());
        for (int i = 0; i < resultsJsonArray.length(); i++) {
            results.add(LegislatorSerializer.parseJsonObject(resultsJsonArray.getJSONObject(i), legislatorImageUrlFormatter));
        }
        legislatorResponse.setResults(results);

        Page page = PageSerializer.parseJsonObject(json.optJSONObject(FIELD_PAGE));
        legislatorResponse.setPage(page);


        return legislatorResponse;
    }

    public static JSONObject toJsonObject(LegislatorResponse serializableObject) throws JSONException {
        JSONObject obj = new JSONObject();
        obj.put(FIELD_COUNT, serializableObject.getCount());

        JSONArray resultsJsonArray = new JSONArray();
        List<Legislator> results = serializableObject.getResults();
        for (Legislator item : results) {
            resultsJsonArray.put(LegislatorSerializer.toJsonObject(item));
        }
        obj.put(FIELD_RESULTS, resultsJsonArray);

        obj.put(FIELD_PAGE, PageSerializer.toJsonObject(serializableObject.getPage()));
        return obj;
    }
   
}

